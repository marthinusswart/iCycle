#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3031
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iCycle.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="iCycle")]
	public partial class ExercisesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExerciseRoute(ExerciseRoute instance);
    partial void UpdateExerciseRoute(ExerciseRoute instance);
    partial void DeleteExerciseRoute(ExerciseRoute instance);
    partial void InsertExercise(Exercise instance);
    partial void UpdateExercise(Exercise instance);
    partial void DeleteExercise(Exercise instance);
    partial void InsertTimeZone(TimeZone instance);
    partial void UpdateTimeZone(TimeZone instance);
    partial void DeleteTimeZone(TimeZone instance);
    #endregion
		
		public ExercisesDataContext() : 
				base(global::iCycle.Properties.Settings.Default.iCycleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ExercisesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExercisesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExercisesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExercisesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ExerciseRoute> ExerciseRoutes
		{
			get
			{
				return this.GetTable<ExerciseRoute>();
			}
		}
		
		public System.Data.Linq.Table<Exercise> Exercises
		{
			get
			{
				return this.GetTable<Exercise>();
			}
		}
		
		public System.Data.Linq.Table<TimeZone> TimeZones
		{
			get
			{
				return this.GetTable<TimeZone>();
			}
		}
	}
	
	[Table(Name="dbo.Route")]
	public partial class ExerciseRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Map;
		
		private System.Nullable<decimal> _Distance;
		
		private EntitySet<Exercise> _Exercises;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMapChanging(System.Data.Linq.Binary value);
    partial void OnMapChanged();
    partial void OnDistanceChanging(System.Nullable<decimal> value);
    partial void OnDistanceChanged();
    #endregion
		
		public ExerciseRoute()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Map", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[Column(Storage="_Distance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[Association(Name="ExerciseRoute_Exercise", Storage="_Exercises", OtherKey="RouteId")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseRoute = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseRoute = null;
		}
	}
	
	[Table(Name="dbo.Exercise")]
	public partial class Exercise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _ExerciseDate;
		
		private decimal _AverageSpeed;
		
		private System.Nullable<decimal> _TopSpeed;
		
		private System.Nullable<decimal> _Distance;
		
		private string _Duration;
		
		private System.Nullable<int> _Calories;
		
		private System.Nullable<int> _AverageHeartRate;
		
		private System.Nullable<int> _MaximumHeartRate;
		
		private string _DurationInZone;
		
		private System.Nullable<int> _FatBurned;
		
		private System.Nullable<int> _RouteId;
		
		private System.Nullable<int> _ZoneUpper;
		
		private System.Nullable<int> _ZoneLower;
		
		private System.Nullable<int> _TimeZoneId;
		
		private EntityRef<ExerciseRoute> _ExerciseRoute;
		
		private EntityRef<TimeZone> _TimeZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExerciseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExerciseDateChanged();
    partial void OnAverageSpeedChanging(decimal value);
    partial void OnAverageSpeedChanged();
    partial void OnTopSpeedChanging(System.Nullable<decimal> value);
    partial void OnTopSpeedChanged();
    partial void OnDistanceChanging(System.Nullable<decimal> value);
    partial void OnDistanceChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    partial void OnCaloriesChanging(System.Nullable<int> value);
    partial void OnCaloriesChanged();
    partial void OnAverageHeartRateChanging(System.Nullable<int> value);
    partial void OnAverageHeartRateChanged();
    partial void OnMaximumHeartRateChanging(System.Nullable<int> value);
    partial void OnMaximumHeartRateChanged();
    partial void OnDurationInZoneChanging(string value);
    partial void OnDurationInZoneChanged();
    partial void OnFatBurnedChanging(System.Nullable<int> value);
    partial void OnFatBurnedChanged();
    partial void OnRouteIdChanging(System.Nullable<int> value);
    partial void OnRouteIdChanged();
    partial void OnZoneUpperChanging(System.Nullable<int> value);
    partial void OnZoneUpperChanged();
    partial void OnZoneLowerChanging(System.Nullable<int> value);
    partial void OnZoneLowerChanged();
    partial void OnTimeZoneIdChanging(System.Nullable<int> value);
    partial void OnTimeZoneIdChanged();
    #endregion
		
		public Exercise()
		{
			this._ExerciseRoute = default(EntityRef<ExerciseRoute>);
			this._TimeZone = default(EntityRef<TimeZone>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ExerciseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExerciseDate
		{
			get
			{
				return this._ExerciseDate;
			}
			set
			{
				if ((this._ExerciseDate != value))
				{
					this.OnExerciseDateChanging(value);
					this.SendPropertyChanging();
					this._ExerciseDate = value;
					this.SendPropertyChanged("ExerciseDate");
					this.OnExerciseDateChanged();
				}
			}
		}
		
		[Column(Storage="_AverageSpeed", DbType="Decimal(18,2) NOT NULL")]
		public decimal AverageSpeed
		{
			get
			{
				return this._AverageSpeed;
			}
			set
			{
				if ((this._AverageSpeed != value))
				{
					this.OnAverageSpeedChanging(value);
					this.SendPropertyChanging();
					this._AverageSpeed = value;
					this.SendPropertyChanged("AverageSpeed");
					this.OnAverageSpeedChanged();
				}
			}
		}
		
		[Column(Storage="_TopSpeed", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TopSpeed
		{
			get
			{
				return this._TopSpeed;
			}
			set
			{
				if ((this._TopSpeed != value))
				{
					this.OnTopSpeedChanging(value);
					this.SendPropertyChanging();
					this._TopSpeed = value;
					this.SendPropertyChanged("TopSpeed");
					this.OnTopSpeedChanged();
				}
			}
		}
		
		[Column(Storage="_Distance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="VarChar(50)")]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Column(Storage="_Calories", DbType="Int")]
		public System.Nullable<int> Calories
		{
			get
			{
				return this._Calories;
			}
			set
			{
				if ((this._Calories != value))
				{
					this.OnCaloriesChanging(value);
					this.SendPropertyChanging();
					this._Calories = value;
					this.SendPropertyChanged("Calories");
					this.OnCaloriesChanged();
				}
			}
		}
		
		[Column(Storage="_AverageHeartRate", DbType="Int")]
		public System.Nullable<int> AverageHeartRate
		{
			get
			{
				return this._AverageHeartRate;
			}
			set
			{
				if ((this._AverageHeartRate != value))
				{
					this.OnAverageHeartRateChanging(value);
					this.SendPropertyChanging();
					this._AverageHeartRate = value;
					this.SendPropertyChanged("AverageHeartRate");
					this.OnAverageHeartRateChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumHeartRate", DbType="Int")]
		public System.Nullable<int> MaximumHeartRate
		{
			get
			{
				return this._MaximumHeartRate;
			}
			set
			{
				if ((this._MaximumHeartRate != value))
				{
					this.OnMaximumHeartRateChanging(value);
					this.SendPropertyChanging();
					this._MaximumHeartRate = value;
					this.SendPropertyChanged("MaximumHeartRate");
					this.OnMaximumHeartRateChanged();
				}
			}
		}
		
		[Column(Storage="_DurationInZone", DbType="VarChar(50)")]
		public string DurationInZone
		{
			get
			{
				return this._DurationInZone;
			}
			set
			{
				if ((this._DurationInZone != value))
				{
					this.OnDurationInZoneChanging(value);
					this.SendPropertyChanging();
					this._DurationInZone = value;
					this.SendPropertyChanged("DurationInZone");
					this.OnDurationInZoneChanged();
				}
			}
		}
		
		[Column(Storage="_FatBurned", DbType="Int")]
		public System.Nullable<int> FatBurned
		{
			get
			{
				return this._FatBurned;
			}
			set
			{
				if ((this._FatBurned != value))
				{
					this.OnFatBurnedChanging(value);
					this.SendPropertyChanging();
					this._FatBurned = value;
					this.SendPropertyChanged("FatBurned");
					this.OnFatBurnedChanged();
				}
			}
		}
		
		[Column(Storage="_RouteId", DbType="Int")]
		public System.Nullable<int> RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					if (this._ExerciseRoute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[Column(Storage="_ZoneUpper", DbType="Int")]
		public System.Nullable<int> ZoneUpper
		{
			get
			{
				return this._ZoneUpper;
			}
			set
			{
				if ((this._ZoneUpper != value))
				{
					this.OnZoneUpperChanging(value);
					this.SendPropertyChanging();
					this._ZoneUpper = value;
					this.SendPropertyChanged("ZoneUpper");
					this.OnZoneUpperChanged();
				}
			}
		}
		
		[Column(Storage="_ZoneLower", DbType="Int")]
		public System.Nullable<int> ZoneLower
		{
			get
			{
				return this._ZoneLower;
			}
			set
			{
				if ((this._ZoneLower != value))
				{
					this.OnZoneLowerChanging(value);
					this.SendPropertyChanging();
					this._ZoneLower = value;
					this.SendPropertyChanged("ZoneLower");
					this.OnZoneLowerChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZoneId", DbType="Int")]
		public System.Nullable<int> TimeZoneId
		{
			get
			{
				return this._TimeZoneId;
			}
			set
			{
				if ((this._TimeZoneId != value))
				{
					if (this._TimeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeZoneIdChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneId = value;
					this.SendPropertyChanged("TimeZoneId");
					this.OnTimeZoneIdChanged();
				}
			}
		}
		
		[Association(Name="ExerciseRoute_Exercise", Storage="_ExerciseRoute", ThisKey="RouteId", IsForeignKey=true)]
		public ExerciseRoute ExerciseRoute
		{
			get
			{
				return this._ExerciseRoute.Entity;
			}
			set
			{
				ExerciseRoute previousValue = this._ExerciseRoute.Entity;
				if (((previousValue != value) 
							|| (this._ExerciseRoute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExerciseRoute.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._ExerciseRoute.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._RouteId = value.Id;
					}
					else
					{
						this._RouteId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExerciseRoute");
				}
			}
		}
		
		[Association(Name="TimeZone_Exercise", Storage="_TimeZone", ThisKey="TimeZoneId", IsForeignKey=true)]
		public TimeZone TimeZone
		{
			get
			{
				return this._TimeZone.Entity;
			}
			set
			{
				TimeZone previousValue = this._TimeZone.Entity;
				if (((previousValue != value) 
							|| (this._TimeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeZone.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._TimeZone.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._TimeZoneId = value.Id;
					}
					else
					{
						this._TimeZoneId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TimeZone")]
	public partial class TimeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Exercise> _Exercises;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TimeZone()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="TimeZone_Exercise", Storage="_Exercises", OtherKey="TimeZoneId")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = null;
		}
	}
}
#pragma warning restore 1591
